<h1>notes</h1>

<p>
     rails generate scaffold BlogArticle title:string description:text
</p>

<p>
    rails db:migrate
</p>

<a href="/about" target="_blank">rails generate scaffold的使用方法</a>


<p>
     http://localhost:3000/blog_articles/
</p>

<p>
    在models里建立blog_article.rb文件，然后在文件中输入：
    class BlogArticle < ApplicationRecord
end
</p>
<p>
    在进行CRUD之前，需要先在Terminal里面输入 rails c ，c是console的意思，然后输入classname.all, 即BlogArticle.all， Terminal上就会开始创建并显示得到sql数据
</p>

<h2>create</h2>

<p>
    1. create方法：BlogArticle.create(title:"the 3 article", description:"description 3")
</p>
<p>
    2. new + save方法: article4 = BlogArticle.new(title: "the 3 article", description: "description 3")
article.save

</p>

<h2>find</h2>

<p>Class.find(#)查找id为#的数据。在不知道id的情况下，可以使用Class.first找到第一条数据，Class.last找到最后一条</p>

<h2>update</h2>

<p>
    1. 直接修改属性并save. 
    article = BlogArticle.find(1)  # 查找 id 为 1 的记录
article.title = "New Title"    # 直接修改属性
article.description = "New Description"
article.save                  # 保存更改

</p>

<p>
   2. update 方法. 
update方法可以用于更新一个已存在的记录。它会执行验证和回调，并在数据库中保存更改。
article = BlogArticle.find(1) # 查找 id 为 1 的记录
article.update(title: "Updated Title", description: "Updated Description")

</p>

<h2>delete</h2>
<p>
    1. destroy
    article = BlogArticle.find(1) # 查找 id 为 1 的记录
article.destroy               # 删除记录

</p>

<h2>数据验证</h2>
<p>
    class.errors.full_messages 可以查询错误信息
</p>

<p>
    class BlogArticle < ApplicationRecord
  validates :title, presence: true 
  validates :description, presence:true, length:{minimum:2, maximum: 200} 
end

</p>

<h2>生成路由</h2>
<p>
    1. resources的作用. 
resources用于生成一组标准的CRUD（创建、读取、更新、删除）操作的路由，这些路由会自动映射到相应的控制器动作。每个resources调用都会生成以下七个RESTful路由：

index：显示所有资源的列表。
show：显示单个资源的详情。
new：显示创建新资源的表单。
create：处理创建新资源的请求。
edit：显示编辑已有资源的表单。
update：处理更新已有资源的请求。
destroy：处理删除资源的请求。
</p>
<p>
    rails routes --expanded 可以查看resources生成的路由的样式
</p>

<h1></h1>
<h1>

</h1>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ruby on Rails Symbols and Usage Guide</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
        h1 {
            text-align: center;
        }
    </style>
</head>
<body>

<h1>Ruby on Rails 常用符号与用法表</h1>

<table>
    <thead>
        <tr>
            <th>符号/语法</th>
            <th>类型/用途</th>
            <th>用法示例</th>
            <th>说明</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@</td>
            <td>实例变量</td>
            <td>@article</td>
            <td>用于定义控制器中的实例变量，可以在视图中访问。</td>
        </tr>
        <tr>
            <td>@@</td>
            <td>类变量</td>
            <td>@@counter</td>
            <td>定义类变量，类的所有实例共享。在Rails中不常用。</td>
        </tr>
        <tr>
            <td>$</td>
            <td>全局变量</td>
            <td>$global_var</td>
            <td>定义一个全局变量，所有作用域都可以访问。在Rails中很少使用。</td>
        </tr>
        <tr>
            <td>:</td>
            <td>符号（Symbol）</td>
            <td>:name, :title</td>
            <td>表示不可变的字符串，通常用于哈希的键、方法参数、枚举等。</td>
        </tr>
        <tr>
            <td>{}</td>
            <td>哈希（Hash）或代码块</td>
            <td>{ key: "value" }, items.each { ... }</td>
            <td>作为哈希表示键值对集合；在单行代码块中也使用。</td>
        </tr>
        <tr>
            <td>do...end</td>
            <td>代码块</td>
            <td>items.each do |item| ... end</td>
            <td>多行代码块的表示方式，用于迭代、块传递等。</td>
        </tr>
        <tr>
            <td>&lt;%= ... %&gt;</td>
            <td>ERB标签 - 输出</td>
            <td>&lt;%= @article.title %&gt;</td>
            <td>用于在视图中嵌入Ruby代码并输出结果。</td>
        </tr>
        <tr>
            <td>&lt;% ... %&gt;</td>
            <td>ERB标签 - 执行代码</td>
            <td>&lt;% if @article.present? %&gt; ... &lt;% end %&gt;</td>
            <td>用于在视图中嵌入Ruby代码但不输出结果。</td>
        </tr>
        <tr>
            <td>&lt;%# ... %&gt;</td>
            <td>ERB注释</td>
            <td>&lt;%# This is a comment %&gt;</td>
            <td>在视图中用于注释Ruby代码，最终不会在HTML中输出。</td>
        </tr>
        <tr>
            <td>&lt;%== ... %&gt;</td>
            <td>ERB标签 - 原样输出</td>
            <td>&lt;%== @article.content.html_safe %&gt;</td>
            <td>用于直接输出HTML而不进行转义。谨慎使用，避免XSS漏洞。</td>
        </tr>
        <tr>
            <td>-&gt; {} 或 lambda</td>
            <td>Lambda（匿名函数）</td>
            <td>-&gt; { puts "Hello" }, lambda { |x| x*2 }</td>
            <td>创建一个匿名函数或Proc对象，常用于传递可执行的代码块。</td>
        </tr>
        <tr>
            <td>| 和 ||</td>
            <td>块参数、逻辑运算符</td>
            <td>items.each { |item| ... }, true || false</td>
            <td>| 用于块参数，|| 用于逻辑或运算。</td>
        </tr>
        <tr>
            <td>[]</td>
            <td>数组或哈希的访问符</td>
            <td>array[0], hash[:key]</td>
            <td>用于访问数组或哈希的元素。</td>
        </tr>
        <tr>
            <td>%</td>
            <td>字符串数组或计算余数</td>
            <td>%w(one two three), 5 % 2</td>
            <td>%w 创建字符串数组；% 也用于数学运算（求余）。</td>
        </tr>
        <tr>
            <td>()</td>
            <td>方法调用的参数括号</td>
            <td>method(arg1, arg2)</td>
            <td>用于传递方法的参数，也可以省略（特别是在Rails中）。</td>
        </tr>
        <tr>
            <td>.</td>
            <td>方法调用符</td>
            <td>object.method</td>
            <td>用于调用对象的方法。</td>
        </tr>
        <tr>
            <td>::</td>
            <td>模块或类的作用域限定符</td>
            <td>Math::PI, MyModule::MyClass</td>
            <td>用于模块或类的命名空间限定。</td>
        </tr>
        <tr>
            <td>=&gt;</td>
            <td>哈希的旧语法</td>
            <td>{ :key =&gt; "value" }</td>
            <td>Ruby 1.9前的哈希语法，现在常用:key形式。</td>
        </tr>
        <tr>
            <td>? 和 !</td>
            <td>方法结尾标志</td>
            <td>empty?, save!</td>
            <td>? 表示返回布尔值，! 表示可能修改对象或引发异常的方法。</td>
        </tr>
        <tr>
            <td>@ 符号（HAML）</td>
            <td>HAML中的实例变量</td>
            <td>= @article.title (HAML)</td>
            <td>HAML视图语法中使用 = 来输出变量值，视图文件扩展名为 .haml。</td>
        </tr>
    </tbody>
</table>

</body>
</html>